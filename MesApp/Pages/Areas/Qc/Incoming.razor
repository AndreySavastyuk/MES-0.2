@page "/qc/incoming"
@rendermode Microsoft.AspNetCore.Components.Web.RenderMode.InteractiveServer
@using MesApp.Data
@using MesApp.Domain
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager Navigation

<h3>–í—Ö–æ–¥–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å –û–¢–ö</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>‚Ññ</th>
            <th>–ú–∞—Ç–µ—Ä–∏–∞–ª</th>
            <th>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</th>
            <th>–ü–æ—Å—Ç–∞–≤—â–∏–∫</th>
            <th>–î–∞—Ç–∞</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
        </tr>
    </thead>
    <tbody>
        @if (receipts.Any())
        {
            @foreach (var receipt in receipts)
            {
                <tr>
                    <td>@receipt.Id</td>
                    <td>@receipt.Item.Name</td>
                    <td>
                        @if (!string.IsNullOrEmpty(receipt.CertFilePath))
                        {
                            <a href="@receipt.CertFilePath" target="_blank" class="btn btn-sm btn-light" title="–û—Ç–∫—Ä—ã—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç">
                                üëÅÔ∏è
                            </a>
                        }
                        else
                        {
                            <span class="text-muted">-</span>
                        }
                    </td>
                    <td>@(receipt.Supplier?.Name ?? "-")</td>
                    <td>@receipt.ReceivedAt.ToString("dd.MM.yyyy")</td>
                    <td>
                        <a href="/qc/inspect?id=@receipt.Id" class="btn btn-sm btn-warning">
                            –ò–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                        </a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center text-muted">–ù–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<MaterialReceipt> receipts = new();

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();
        receipts = await db.MaterialReceipts
            .Include(r => r.Item)
            .Include(r => r.Supplier)
            .Where(r => r.Status == ReceiptStatus.OnQc)
            .OrderBy(r => r.ReceivedAt)
            .ToListAsync();
    }
}