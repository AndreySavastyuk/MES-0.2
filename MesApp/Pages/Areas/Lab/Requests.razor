@page "/lab/requests"
@rendermode Microsoft.AspNetCore.Components.Web.RenderMode.InteractiveServer
@using MesApp.Data
@using MesApp.Domain
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager Navigation

<h3>Заявки на испытания</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>№</th>
            <th>Материал</th>
            <th>Испытания</th>
            <th>Внешняя?</th>
            <th>Статус</th>
            <th>Действия</th>
        </tr>
    </thead>
    <tbody>
        @if (requests.Any())
        {
            @foreach (var request in requests)
            {
                <tr>
                    <td>@request.Id</td>
                    <td>@request.Receipt.Item.Name</td>
                    <td>@request.Tests</td>
                    <td>
                        @if (request.External)
                        {
                            <span class="badge bg-info">Внешняя</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Внутренняя</span>
                        }
                    </td>
                    <td>
                        <span class="badge @GetStatusBadgeClass(request.Status)">
                            @GetStatusDisplay(request.Status)
                        </span>
                    </td>
                    <td>
                        <a href="/lab/request-edit?id=@request.Id" class="btn btn-sm btn-primary">
                            Открыть
                        </a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center text-muted">Нет активных заявок</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<LabTestRequest> requests = new();

    protected override async Task OnInitializedAsync()
    {
        using var db = DbFactory.CreateDbContext();
        requests = await db.LabTestRequests
            .Include(r => r.Receipt)
                .ThenInclude(r => r.Item)
            .Where(r => r.Status != "Completed")
            .OrderBy(r => r.CreatedAt)
            .ToListAsync();
    }

    private string GetStatusDisplay(string status) => status switch
    {
        "New" => "Новая",
        "Sent" => "Отправлена",
        "InProcess" => "В работе",
        "Completed" => "Завершена",
        _ => status
    };

    private string GetStatusBadgeClass(string status) => status switch
    {
        "New" => "bg-primary",
        "Sent" => "bg-warning text-dark",
        "InProcess" => "bg-info",
        "Completed" => "bg-success",
        _ => "bg-secondary"
    };
}